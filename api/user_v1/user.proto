syntax = "proto3";

package user_v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto"; 
import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/merynayr/user/pkg/user_v1;user_v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
      title: "User API"
      version: "1.0.0"
      contact: {
          name: "Dmitry Boyarkin"
          email: "boyarkin_dima2@mail.ru"
      };
  };

  host: "localhost:8091",
  schemes: HTTP,
  schemes: HTTPS,
  consumes: "application/json",
  produces: "application/json",
};

service UserV1 {
  // Создает нового пользователя
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/user/v1/create"
      body: "*"
    };
  }
  // Получает данные пользователя по id
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/user/v1/get/{id}"
    };
  }
  // Обновляет данные о пользователе
  rpc UpdateUser(UpdateUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/user/v1/update"
      body: "*"
    };
  }
  // Удаляет пользователя по id
  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/user/v1/delete/{id}"
    };
  }
}

enum role {
  USER = 0;
  ADMIN = 1;
}

message CreateUserInfo {
  string name = 1 [(validate.rules).string = {
    pattern:   "^[A-Za-z]+( [A-Za-z]+)*$",
    min_len: 3,
    max_len: 64,
  }];
  string email = 2 [(validate.rules).string.email = true];
  string password = 3;
  string password_confirm = 4;
  role role = 5 [(validate.rules).enum = {in: [0, 1]}];
}

message User {
  int64 id = 1;
  string name = 2;
  string email = 3;
  role role = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
}

message UpdateUserInfo {
  int64 id = 1;
  string name = 2 [(validate.rules).string = {
    pattern:   "^[A-Za-z]+( [A-Za-z]+)*$",
    min_len: 3,
    max_len: 64,
  }];
  string email = 3 [(validate.rules).string.email = true];
}

message CreateUserRequest { 
  CreateUserInfo info = 1;
}

message CreateUserResponse { 
  int64 id = 1; 
}

message GetUserRequest { 
  int64 id = 1; 
}

message GetUserResponse { 
  User user = 1; 
}

message UpdateUserRequest {
  UpdateUserInfo info = 1;
}

message DeleteUserRequest { 
  int64 id = 1; 
}